# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T12:40:26+00:00

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import Any, List, Optional

from pydantic import BaseModel, Field, RootModel, conint, constr


class ContainerNotFoundException(RootModel[Any]):
    root: Any


class ContentRangePattern(RootModel[constr(pattern=r'^bytes=\d+\-\d+/\d+$')]):
    root: constr(pattern=r'^bytes=\d+\-\d+/\d+$')


class ContentType(RootModel[constr(pattern=r'^[\w\-\/\.\+]{1,255}$')]):
    root: constr(pattern=r'^[\w\-\/\.\+]{1,255}$')


class DeleteObjectRequest(BaseModel):
    pass


class DeleteObjectResponse(BaseModel):
    pass


class DescribeObjectRequest(BaseModel):
    pass


class DescribeObjectResponse(BaseModel):
    pass


class ETag(RootModel[constr(pattern=r'[0-9A-Fa-f]+', min_length=1, max_length=64)]):
    root: constr(pattern=r'[0-9A-Fa-f]+', min_length=1, max_length=64)


class GetObjectRequest(BaseModel):
    pass


class InternalServerError(RootModel[Any]):
    root: Any


class ItemName(RootModel[constr(pattern=r'[A-Za-z0-9_\.\-\~]+')]):
    root: constr(pattern=r'[A-Za-z0-9_\.\-\~]+')


class ItemType(Enum):
    OBJECT = 'OBJECT'
    FOLDER = 'FOLDER'


class ListItemsRequest(BaseModel):
    pass


class ListLimit(RootModel[conint(ge=1, le=1000)]):
    root: conint(ge=1, le=1000)


class ListPathNaming(
    RootModel[
        constr(
            pattern=r'/?(?:[A-Za-z0-9_\.\-\~]+/){0,10}(?:[A-Za-z0-9_\.\-\~]+)?/?',
            min_length=0,
            max_length=900,
        )
    ]
):
    root: constr(
        pattern=r'/?(?:[A-Za-z0-9_\.\-\~]+/){0,10}(?:[A-Za-z0-9_\.\-\~]+)?/?',
        min_length=0,
        max_length=900,
    )


class NonNegativeLong(RootModel[conint(ge=0)]):
    root: conint(ge=0)


class ObjectNotFoundException(RootModel[Any]):
    root: Any


class PaginationToken(RootModel[str]):
    root: str


class PathNaming(
    RootModel[
        constr(
            pattern=r'(?:[A-Za-z0-9_\.\-\~]+/){0,10}[A-Za-z0-9_\.\-\~]+',
            min_length=1,
            max_length=900,
        )
    ]
):
    root: constr(
        pattern=r'(?:[A-Za-z0-9_\.\-\~]+/){0,10}[A-Za-z0-9_\.\-\~]+',
        min_length=1,
        max_length=900,
    )


class PayloadBlob(RootModel[str]):
    root: str


class PutObjectRequest(BaseModel):
    Body: PayloadBlob


class RangePattern(RootModel[constr(pattern=r'^bytes=(?:\d+\-\d*|\d*\-\d+)$')]):
    root: constr(pattern=r'^bytes=(?:\d+\-\d*|\d*\-\d+)$')


class RequestedRangeNotSatisfiableException(RootModel[Any]):
    root: Any


class SHA256Hash(
    RootModel[constr(pattern=r'[0-9A-Fa-f]{64}', min_length=64, max_length=64)]
):
    root: constr(pattern=r'[0-9A-Fa-f]{64}', min_length=64, max_length=64)


class StorageClass(Enum):
    TEMPORAL = 'TEMPORAL'


class StringPrimitive(RootModel[str]):
    root: str


class TimeStamp(RootModel[datetime]):
    root: datetime


class UploadAvailability(Enum):
    STANDARD = 'STANDARD'
    STREAMING = 'STREAMING'


class StatusCode(RootModel[int]):
    root: int


class FieldPathPutRequest(BaseModel):
    Body: str = Field(..., description='The bytes to be stored. ')


class XAmzStorageClass(Enum):
    TEMPORAL = 'TEMPORAL'


class XAmzUploadAvailability(Enum):
    STANDARD = 'STANDARD'
    STREAMING = 'STREAMING'


class GetObjectResponse(BaseModel):
    Body: Optional[PayloadBlob] = None
    StatusCode_1: Optional[StatusCode] = Field(None, alias='StatusCode')


class Item(BaseModel):
    ContentLength: Optional[NonNegativeLong] = None
    ContentType_1: Optional[ContentType] = Field(None, alias='ContentType')
    ETag_1: Optional[ETag] = Field(None, alias='ETag')
    LastModified: Optional[TimeStamp] = None
    Name: Optional[ItemName] = None
    Type: Optional[ItemType] = None


class ItemList(RootModel[List[Item]]):
    root: List[Item]


class ListItemsResponse(BaseModel):
    Items: Optional[ItemList] = None
    NextToken: Optional[PaginationToken] = None


class PutObjectResponse(BaseModel):
    ContentSHA256: Optional[SHA256Hash] = None
    ETag_1: Optional[ETag] = Field(None, alias='ETag')
    StorageClass_1: Optional[StorageClass] = Field(None, alias='StorageClass')
